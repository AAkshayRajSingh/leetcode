class Solution {
public:
    int largest1BorderedSquare(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int>> hbox(m,vector<int>(n));
        vector<vector<int>> vbox(m,vector<int>(n));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1)
                {
                    if(j>0){
                        hbox[i][j]=hbox[i][j-1];
                    }
                    if(i>0){
                        vbox[i][j]=vbox[i-1][j];
                    }
                    hbox[i][j]+=1;
                    vbox[i][j]+=1;
                }
            }
        }
        int output=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                int size=min(hbox[i][j],vbox[i][j]);
                if(size==0) continue;
                for(int k=size;k>output;k--){
                    if(hbox[i-k+1][j]>=k && vbox[i][j-k+1]>=k){
                        output=max(output,k);
                    }
                }
            }
        }
        return output*output;
    }
};
