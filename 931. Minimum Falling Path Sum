class Solution {
public:
    int helper(vector<vector<int>>& matrix,int r,int c,vector<vector<int>>& dp){
        if(r==0 && c<matrix[0].size() && c>=0)return matrix[r][c];
        if(c>=matrix[0].size() || c<0) return INT_MAX;
        if(dp[r][c]!=INT_MAX) return dp[r][c];
        return dp[r][c]=matrix[r][c] + min(min(helper(matrix,r-1,c-1,dp),
        helper(matrix,r-1,c,dp)),helper(matrix,r-1,c+1,dp));
    }
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int r=matrix.size();
        int c=matrix[0].size();
        vector<vector<int>> dp(r+1,vector<int> (c+1,INT_MAX));
        int ans=INT_MAX;
        for(int i=0;i<c;i++){
            ans=min(ans,helper(matrix,r-1,i,dp));
        }
        return ans;
    }
};
