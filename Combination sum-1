class Solution {
public:
    void findCombinationSum(int index,vector<int>& candidates, int target, vector<vector<int>> &ans,vector<int>&  ds){
        int n=candidates.size();
        if(index==n){
            if(target==0){
                ans.push_back(ds);
            }
            return;
        }
        if(candidates[index]<=target){
            ds.push_back(candidates[index]);
            findCombinationSum(index,candidates,target-candidates[index],ans,ds);
            ds.pop_back();
        }
        findCombinationSum(index+1,candidates,target,ans,ds);
    }
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> ans;
        vector<int> ds;
            findCombinationSum(0,candidates,target,ans,ds);
            return ans;
    }
};
TC:2^n X K
SC:k X x
