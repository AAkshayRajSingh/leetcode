/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
TreeNode* buildTreePI(vector<int>& inorder,int is,int ie, vector<int>& postorder,int ps,int pe,map<int,int> &inmp){
   if(ps>pe || is>ie) return NULL;
   TreeNode *root=new TreeNode(postorder[pe]);
   int inroot=inmp[root->val];
   int numsleft=inroot-is;
   root->left=buildTreePI(inorder,is,inroot-1,postorder,ps,ps+numsleft-1,inmp);
   root->right=buildTreePI(inorder,inroot+1,ie,postorder,ps+numsleft,pe-1,inmp);
   return root;
}
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        map<int,int> inmp;
        for(int i=0;i<=inorder.size()-1;i++){
            inmp[inorder[i]]=i;
        }
        return buildTreePI(inorder,0,inorder.size()-1,postorder,0,postorder.size()-1,inmp);
    }
};
