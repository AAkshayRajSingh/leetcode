class Solution {
public:
    int shortestPathLength(vector<vector<int>>& graph) {
        int n=graph.size();
        int mxMaxk=(1<<n)-1;
        queue<pair<int,pair<int,int>>> q;
        set<pair<int,int>> st;
        for(int i=0;i<n;i++){
            int mask=(1<<i);
            q.push({i,{0,mask}});
            st.insert({i,mask});
        }
        while(!q.empty()){
            int node=q.front().first;
            int dis=q.front().second.first;
            int mask=q.front().second.second;
            q.pop();
            for(auto it:graph[node]){
                int newMask=mask|(1<<it);
                if(newMask==mxMaxk)
                return dis+1;
                if(st.count({it,newMask}))
                continue;

                q.push({it,{dis+1,newMask}});
                st.insert({it,newMask});
            }
        }
        return 0;
    }
};
