class Solution {
public:
    void dfs(vector<vector<int>>& graph,int currNode,vector<bool>& vis,int &nodeCount,int& edgeCount){
        vis[currNode]=true;
        nodeCount+=1;
        edgeCount+=graph[currNode].size();
        for(int nextNode:graph[currNode]){
            if(!vis[nextNode]){
                dfs(graph,nextNode,vis,nodeCount,edgeCount);
            }
        }
    }
    int countCompleteComponents(int n, vector<vector<int>>& edges) {
        vector<vector<int>> graph(n);
        vector<bool> vis(n);
        for(vector<int> edge:edges){
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }
        int ans=0;
        for(int i=0;i<n;i++){
            int nodecount=0,edgecount=0;
            if(!vis[i]){
                dfs(graph,i,vis,nodecount,edgecount);
                    if((nodecount)*(nodecount-1)==edgecount){
                                    ans+=1;
                                }
            } 
        }
        return ans;
    }
};
