class Solution
{
    public:
    int dp[201][201];
    int solve(int n,int k){
        
        if(n==1){
            return k;
        }
        if(k==0){
            return 0;
            
        }
       
        if(dp[n][k]!=-1) return dp[n][k];
         int ans=INT_MAX;
        for(int i=1;i<=k;i++ ){
            int Break=solve(n-1,i-1);
            int notBreak=solve(n,k-i);
            int maxVal=max(Break,notBreak);
            ans=min(ans,maxVal+1);
        }
        return dp[n][k]=ans;
    }
    //Function to find minimum number of attempts needed in 
    //order to find the critical floor.
    int eggDrop(int n, int k) 
    {
        // your code here
        memset(dp,-1,sizeof(dp));
        return solve(n,k);
    }
};
