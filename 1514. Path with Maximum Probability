class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& suc, int start, int end) {
        vector<vector<pair<int,double>>> graph(n);
        for(int i=0;i<edges.size();i++){
            graph[edges[i][0]].push_back({edges[i][1],suc[i]});
            graph[edges[i][1]].push_back({edges[i][0],suc[i]});
        }
        vector<double>v(n,0);
        priority_queue<pair<double,int>> pq;
        pq.push({1.0,start});
        while(!pq.empty()){
            auto curr=pq.top();
            pq.pop();
            if(curr.second==end){
                return curr.first;
            }
            for(auto it:graph[curr.second]){
                if(v[it.first] < (curr.first*it.second))
                {
                    v[it.first]=curr.first*it.second;
                    pq.push({v[it.first],it.first});
                }
            }   
        }
        return 0;
    }
};
