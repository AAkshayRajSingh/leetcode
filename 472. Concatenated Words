class Solution {
public:
    unordered_map<string,bool> dp;
    bool isConcat(string word,unordered_set<string> &st){
        int l=word.length();
        if(dp.find(word)!=dp.end())
        return dp[word];
        for(int i=0;i<l;i++){
            string prefix=word.substr(0,i+1);
            string suffix=word.substr(i+1);
            if((st.find(prefix)!=st.end()&& isConcat(suffix,st))|| (st.find(prefix)!=st.end()&& st.find(suffix)!=st.end())){
                return dp[word]= true;
            }
        }
        return dp[word]=false;
    }
    vector<string> findAllConcatenatedWordsInADict(vector<string>& words) {
        int n=words.size();
        dp.clear();
        unordered_set<string> st(words.begin(),words.end());
        vector<string> result;
        for(int i=0;i<n;i++){
            string word=words[i];
            if(isConcat(word,st)){
                result.push_back(word);
            }
        }
        return result;
    }
};
