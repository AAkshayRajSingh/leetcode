/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int deepestLeavesSum(TreeNode* root) {
        int cnt=0;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            int n=q.size();
            
            for(int i=0;i<n;i++){
                TreeNode* node=q.front();
                q.pop();
                if(node->left!=NULL) q.push(node->left);
                if(node->right!=NULL) q.push(node->right);
            }
            cnt++;
        }
         queue<TreeNode*> q2;
         q2.push(root);
         int start=0;
         while(start<cnt-1){
                int n=q2.size();
                for(int i=0;i<n;i++){
                    TreeNode* node=q2.front();
                    q2.pop();
                    if(node->left!=NULL) q2.push(node->left);
                    if(node->right!=NULL) q2.push(node->right);
                }
                start++;
         }
         int sum=0;
         while(!q2.empty()){
                TreeNode* node=q2.front();
                sum+=node->val;
                q2.pop();
         }
         return sum;
    }
};
