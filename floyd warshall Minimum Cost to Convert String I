class Solution {
public:
    void FloydWarshall(vector<vector<long long>> &adjMatrix,vector<char>& original, vector<char>& changed, vector<int>& cost){
        for(int i=0;i<original.size();i++){
            adjMatrix[original[i]-'a'][changed[i]-'a']=min(adjMatrix[original[i]-'a'][changed[i]-'a'],(long long)cost[i]);
        }
        for(int k=0;k<26;k++){
            for(int i=0;i<26;i++){
                for(int j=0;j<26;j++){
                adjMatrix[i][j]=min(adjMatrix[i][j],adjMatrix[i][k]+adjMatrix[k][j]);
        }
        }
        }
    }
    long long minimumCost(string source, string target, vector<char>& original, vector<char>& changed, vector<int>& cost) {
        vector<vector<long long>> adjMatrix(26,vector<long long> (26,INT_MAX));
        long long ans=0;
        FloydWarshall(adjMatrix,original,changed,cost);
        for(int i=0;i<source.size();i++){
            if(source[i]==target[i]){
                continue;
            }
            if(adjMatrix[source[i]-'a'][target[i]-'a']==INT_MAX)
                return -1;
            ans+=adjMatrix[source[i]-'a'][target[i]-'a'];
        }
        return ans;
    }
};
