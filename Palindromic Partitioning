class Solution{
public:
int dp[501];
bool isPalindrome(int i,string str,int j){
    while(i<j){
        if (str[i]!=str[j]) return false;
        i++;
        j--;
    }
    return true;
}
int f(int i, string str,int n,vector<int> &dp){
    
    if (i==n) return 0;
    if(dp[i]!=-1) return dp[i];
    int minCost=INT_MAX;
    for(int j=i;j<n;j++){
       if(isPalindrome(i,str,j)){
        int cost=1+f(j+1,str,n,dp);
        minCost=min(minCost,cost);
    }
    }
    return dp[i]=minCost;
}

    int palindromicPartition(string str)
    {
        // code here
        int n=str.size();
        vector<int> dp(n,-1);
        return f(0,str,n,dp)-1;
        
    }
};
