class Solution {
public:
    int makeConnected(int n, vector<vector<int>>& connections) {
        int m=connections.size();
        if(n!=m+1 && n>m )
        {
            return -1;
        }
        vector<int> ds(m+1);
        for(int i=0;i<=m;i++){
            ds[i]=i;
        }
        int components=n;
        for(vector<int> s:connections){
            int el1=s[0];
            int el2=s[1];
            int p1=find_parent(el1,ds);
            int p2=find_parent(el2,ds);
            if(p1!=p2)
            {
                ds[p2]=p1;
                components--;
            }
        }
        return components-1;
    }
    int find_parent(int element,vector<int>&ds){
        if(ds[element]==element) return element;
        return find_parent(ds[element],ds);
    }
};
