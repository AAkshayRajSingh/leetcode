#include <bits/stdc++.h> 
struct Node{
    Node* links[26];
    int ew=0;
    int cw=0;
    bool containsKey(char ch){
        if(links[ch-'a']!=NULL)
        return true;
        else
        return false;
    }
    void put(char ch,Node* node){
        links[ch-'a']=node;
    }
    Node* get(char ch){
      return links[ch-'a'];
    }
    void increaseEnd(){
        ew++;
    }
    void increasePrefix(){
        cw++;
    }
    void deleteEnd(){
        ew--;
    }
    void reducePre(){
        cw--;
    }
    int getEnd(){
        return ew;
    }
    int getPrefix(){
        return cw;
    }
};
class Trie{
private:
Node* root;
    public:

    Trie(){
        // Write your code here.
        root=new Node();
    }

    void insert(string &word){
        // Write your code here.
        Node* node=root;
        for(int i=0;i<word.size();i++){
          if (!node->containsKey(word[i])) {
              node->put(word[i],new Node());
          }
          node=node->get(word[i]);
          node->increasePrefix();
        }
        node->increaseEnd();
    }

    int countWordsEqualTo(string &word){
        // Write your code here.
        Node *node=root;
        for(int i=0;i<word.size();i++){
            if(node->containsKey(word[i]))
            {
                node=node->get(word[i]);
            }
            else{
                return 0;
            }
        }
        return node->getEnd();
    }

    int countWordsStartingWith(string &word){
        // Write your code here.
        Node* node=root;
        for(int i=0;i<word.size();i++){
            if(node->containsKey(word[i])){
                node=node->get(word[i]);
            } else {
                return 0;
            }
        }
        return node->getPrefix();
    }

    void erase(string &word){
        // Write your code here.
        Node* node=root;
        for(int i=0;i<word.size();i++){
            if(node->containsKey(word[i]))
            {
                node=node->get(word[i]);
                node->reducePre();
            }
            else
            return;
        }
        node->deleteEnd();
    }
};
