class Solution {
public:
    vector<vector<string>> partition(string s) {
         vector<vector<string>> ans;
         vector<string> path;
         palindromePartition(0,s,path,ans);
         return ans;
    }
    void palindromePartition(int index,string s,vector<string> &path,vector<vector<string>> &ans){
        if(index==s.size()){
            ans.push_back(path);
            return ;
        }
        for(int i=index;i<s.size();i++){
            if(isPalindrome(s,index,i)){
                path.push_back(s.substr(index,i-index+1));
                palindromePartition(i+1,s,path,ans);
                path.pop_back();
            }
        }
    }
    bool isPalindrome(string s,int start,int end){
        while(start<=end){
            if(s[start++]!=s[end--]){
                return false;
            }   
        }
         return true;
    }

};


Time Complexity: O( (2^n) *k*(n/2) )

Reason: O(2^n) to generate every substring and O(n/2)  to check if the substring generated is a palindrome. O(k) is for inserting the palindromes in another data structure, where k  is the average length of the palindrome list.

Space Complexity: O(k * x)
