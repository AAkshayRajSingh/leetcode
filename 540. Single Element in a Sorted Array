class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int n=nums.size();
        int left=0;
        int right=nums.size()-2;
        
        while(left<=right){
            int mid=(left+right) >>1;
            if(nums[mid]==nums[mid^1])
            left=mid+1;
            else
            right=mid-1;
        }
        return nums[left];
    }
};
Time Complexity: O(logN), N = size of the given array.
Reason: We are basically using the Binary Search algorithm.

Space Complexity: O(1) as we are not using any extra space.
