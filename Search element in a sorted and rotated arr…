class Solution {
public:
    int search(vector<int>& nums, int target) {
        int low=0;
        int high=nums.size()-1;
        if(target==nums[0]){
            return 0;
        }
        while(low<=high){
            int mid=(low+high) >>1;
            if(nums[mid]==target){
                return mid;
            }
            else if(nums[low]==target){
                return low;
            }
             else if(nums[high]==target){
                return high;
            }
            else if(nums[low]<nums[mid]){
                if(nums[low]<=target && target<=nums[mid])
                high=mid-1;
                else
                low=mid+1;
            }
            else{
                if(nums[mid]<=target && target<=nums[high])
                low=mid+1;
                else
                high=mid-1;
            }
        }
        return -1;
    }
};
Time Complexity: O(logN), N = size of the given array.
Reason: We are using binary search to search the target.

Space Complexity: O(1)
Reason: We have not used any extra data structures, this makes space complexity, even in the worst case as O(1).
