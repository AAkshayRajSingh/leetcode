class Solution {
private:
    vector<int> nextSmaller(vector<int> arr){
        int n=arr.size();
        vector<int> ans(n);
        stack<int> st;
        st.push(-1);
        for(int i=n-1;i>=0;i--){
            int curr=arr[i];
            while(st.top()!=-1 &&arr[st.top()]>=curr){
                st.pop();
            }
            if(st.top()==-1)
            ans[i]=n;
            else
            ans[i]=st.top();
            st.push(i);
        }
        return ans;
    }
        vector<int> prevSmaller(vector<int> arr){
        int n=arr.size();
        vector<int> ans(n);
        stack<int> st;
        st.push(-1);
        for(int i=0;i<n;i++){
            int curr=arr[i];
            while(st.top()!=-1 &&arr[st.top()]>=curr){
                st.pop();
            }
            ans[i]=st.top();
            st.push(i);
        }
        return ans;
    }
public:
    int largestArea(vector<int> arr){
        vector<int> next=nextSmaller(arr);
        vector<int> prev=prevSmaller(arr);
        int maxArea=INT_MIN;
        for(int i=0;i<arr.size();i++){
            int l=arr[i];
            int b=next[i]-prev[i]-1;
            maxArea=max(maxArea,l*b);
        }
        return maxArea;
    }
    int maximalRectangle(vector<vector<char>>& matrix) {
        vector<int> histogram(matrix[0].size(),0);
        int maxi=INT_MIN;
        for(int i=0;i<matrix.size();i++){
            for(int j=0;j<histogram.size();j++){
                if(matrix[i][j]=='1'){
                    histogram[j]++;
                }
                else{
                    histogram[j]=0;
                }
            }
            maxi=max(maxi,largestArea(histogram));
        }
        return maxi;
    }
};
