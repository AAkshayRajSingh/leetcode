class Solution {
public:
    int dp[1<<20];
    bool dfs(int m,int T,int k){
        if(T<=0) return 0;
        if(dp[k]!=-1) return dp[k];
        for(int i=0;i<m;++i){
            if(!(k&(1<<i))&& !dfs(m,T-(i+1),k|1<<i)){
                return dp[k]=1;
            }
        }
        return dp[k]=0;
    }
    bool canIWin(int maxChoosableInteger, int desiredTotal) {
        if(desiredTotal==0) return 1;
        int total=maxChoosableInteger*(maxChoosableInteger+1)/2;
        if(total<desiredTotal) return 0;
        if(total==desiredTotal) return maxChoosableInteger%2;
        memset(dp,-1,sizeof dp);
        return dfs(maxChoosableInteger,desiredTotal,0);
    }
};
