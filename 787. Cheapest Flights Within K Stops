class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<vector<pair<int,int>>> adj(n,vector<pair<int,int>>{});
        for(auto x:flights){
            adj[x[0]].push_back({x[1],x[2]});
        }
        queue<pair<int,pair<int,int>>>q;
        vector<int> dist(n,1e9);
        dist[src]=0;
        q.push({0,{src,0}});
        while(!q.empty()){
            auto w=q.front();
            q.pop();
            int stop=w.first;
            int weight=w.second.second;
            int node2=w.second.first;
            
            if(stop>k) continue;
            for(auto it:adj[node2]){
                if(weight+it.second<dist[it.first] && stop<=k){
                    dist[it.first]=weight+it.second;
                    q.push({stop+1,{it.first,dist[it.first]}});
                }
            }
        }
        if(dist[dst]!=1e9) return dist[dst];
        return -1;
    }
};
