class Solution {
public:
    long long ans=0;
    long long dfs(vector<vector<int>> &graph,int node,vector<int> &vis,int seats){
        long long cnt=1;
        vis[node]=1;
        for(int i=0;i<graph[node].size();i++){
           int currNode=graph[node][i];
            if(!vis[currNode]){
                cnt+=(dfs(graph,currNode,vis,seats));
            }
        }
        long long x=cnt/seats;
        if(cnt%seats) x++;
        if(node!=0) ans+=x;
        return cnt;
    }
    long long minimumFuelCost(vector<vector<int>>& roads, int seats) {
        if(roads.size()==0){
            return 0;
        }
        ans=0;
        int n=roads.size();
        vector<vector<int>> v(n+1);
        for(int i=0;i<n;i++){
            v[roads[i][0]].push_back(roads[i][1]);
            v[roads[i][1]].push_back(roads[i][0]);
        }
        vector<int> vis(n+1,0);
        dfs(v,0,vis,seats);
        return ans;
    }
};
