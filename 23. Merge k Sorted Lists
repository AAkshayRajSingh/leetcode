/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeSortedLL(ListNode* list1,ListNode* list2){
        if(list1==NULL) return list2;
        if(list2==NULL) return list1;
        if(list1->val<=list2->val){
            list1->next=mergeSortedLL(list1->next,list2);
            return list1;
        }
        else
        {
            list2->next=mergeSortedLL(list1,list2->next);
            return list2;
        }
        return NULL;
    }

    ListNode* splitLists(int start,int end,vector<ListNode*>& lists){
        if(start>end)
        return NULL;
        if(start==end) return lists[start];
        int mid=start+(end-start)/2;
        ListNode* L1=splitLists(start,mid,lists);
        ListNode* L2=splitLists(mid+1,end,lists);
        return mergeSortedLL(L1,L2);
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        int k=lists.size();
        if(k==0)
        return NULL;
        return splitLists(0,k-1,lists);
    }
};
