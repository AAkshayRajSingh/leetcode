class Solution {
public:
    void dfs(vector<int> adj[],int node,int &count,vector<int> &vis){
        vis[node]=1;
        count++;
        for(auto it:adj[node])
        {
            if(!vis[it])
            dfs(adj,it,count,vis);
        }
    }
    int reachableNodes(int n, vector<vector<int>>& edges, vector<int>& restricted) {
        vector<int> vis(n,0);
        vector<int> adj[n];
        for(int i=0;i<restricted.size();i++){
            vis[restricted[i]]=1;
        }
        int cnt=0;
        for(int i=0;i<edges.size();i++){
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
        }

        dfs(adj,0,cnt,vis);
        return cnt;
    }
};
