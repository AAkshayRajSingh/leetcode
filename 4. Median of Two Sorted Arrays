class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        vector<int> merge;
        int m=nums1.size();
        int n=nums2.size();
        int total=m+n;
        int i=0,j=0;
        while(i<m && j<n){
            if(nums1[i]<nums2[j]){
                merge.push_back(nums1[i]);
                i++;
            }
            else{
                merge.push_back(nums2[j]);
                j++;
            }
        }
        while(i<m){
        merge.push_back(nums1[i]);
        i++;
        }
        
        while(j<n){
        merge.push_back(nums2[j]);
        j++;
        }
        if(total%2==0){
            int mid1=merge[total/2 -1];
            int mid2=merge[total/2];
            return (mid1+mid2)/2.0;
        }
        else
        return merge[total/2];
    }
};
the given code has a time complexity of O(m + n) and a space complexity of O(m + n), where m and n are the sizes of the input arrays.
