class Solution {
public:
    ListNode* reverseList(ListNode* head){
       ListNode* prev=NULL;
       ListNode* curr=head;
       while(curr!=NULL){
           ListNode* nxt=curr->next;
           curr->next=prev;
           prev=curr;
           curr=nxt;
       }
       return prev;
    }
    ListNode* solve(ListNode* l1, ListNode* l2){
        ListNode* dummyhead=new ListNode(0);
        ListNode* tail=dummyhead;
        
        int carry=0;
        while(l1!=NULL || l2!=NULL || carry!=0){
        int digit1= (l1!=NULL) ? l1->val : 0;
        int digit2= (l2!=NULL) ? l2->val : 0;
        int sum= digit1 +digit2+carry;

        carry=sum/10;
        int digit=sum%10;
        ListNode* newNode=new ListNode(digit);
        tail->next=newNode;
        tail=tail->next;

        l1=(l1!=NULL) ? l1->next:NULL;
        l2=(l2!=NULL) ? l2->next:NULL;
        }
        ListNode* result=dummyhead->next;
        delete dummyhead;
        return result;

    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
       l1= reverseList(l1);
        l2= reverseList(l2);
        ListNode* ans=solve(l1,l2);
        return reverseList(ans);
    }
};
