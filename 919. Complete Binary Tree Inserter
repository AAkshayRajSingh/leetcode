/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class CBTInserter {
    int insertNode(TreeNode* root,int val){
        if(root==NULL){

            TreeNode* n=new TreeNode(val);
            root=n;
            return 0;
        }
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            TreeNode* t=q.front();
            q.pop();
            if(!t->left){
                TreeNode* n=new TreeNode(val);
                t->left=n;
                return t->val;
            }
            if(!t->right){
                TreeNode* n=new TreeNode(val);
                t->right=n;
                return t->val;
            }
            q.push(t->left);
            q.push(t->right);
        }
        return 0;
    }
public:
TreeNode* r;
    CBTInserter(TreeNode* root) {
        r=root;
    }
    
    int insert(int val) {
        return insertNode(r,val);
    }
    
    TreeNode* get_root() {
        return r;
    }
};

/**
 * Your CBTInserter object will be instantiated and called as such:
 * CBTInserter* obj = new CBTInserter(root);
 * int param_1 = obj->insert(val);
 * TreeNode* param_2 = obj->get_root();
 */
